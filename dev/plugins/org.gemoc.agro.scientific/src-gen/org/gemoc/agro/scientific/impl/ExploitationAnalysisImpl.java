/**
 */
package org.gemoc.agro.scientific.impl;

import java.util.Collection;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.gemoc.agro.scientific.BiomassModel;
import org.gemoc.agro.scientific.ExploitationAnalysis;
import org.gemoc.agro.scientific.ScientificPackage;
import org.gemoc.agro.scientific.SurfaceData;
import org.gemoc.agro.simulation.Schedule;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Exploitation Analysis</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.gemoc.agro.scientific.impl.ExploitationAnalysisImpl#getBiomassModels <em>Biomass Models</em>}</li>
 *   <li>{@link org.gemoc.agro.scientific.impl.ExploitationAnalysisImpl#getSurfaceDatas <em>Surface Datas</em>}</li>
 *   <li>{@link org.gemoc.agro.scientific.impl.ExploitationAnalysisImpl#getSchedule <em>Schedule</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class ExploitationAnalysisImpl extends MinimalEObjectImpl.Container implements ExploitationAnalysis {
	/**
	 * The cached value of the '{@link #getBiomassModels() <em>Biomass Models</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getBiomassModels()
	 * @generated
	 * @ordered
	 */
	protected EList<BiomassModel> biomassModels;

	/**
	 * The cached value of the '{@link #getSurfaceDatas() <em>Surface Datas</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSurfaceDatas()
	 * @generated
	 * @ordered
	 */
	protected EList<SurfaceData> surfaceDatas;

	/**
	 * The cached value of the '{@link #getSchedule() <em>Schedule</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSchedule()
	 * @generated
	 * @ordered
	 */
	protected Schedule schedule;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExploitationAnalysisImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return ScientificPackage.Literals.EXPLOITATION_ANALYSIS;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<BiomassModel> getBiomassModels() {
		if (biomassModels == null) {
			biomassModels = new EObjectContainmentEList<BiomassModel>(BiomassModel.class, this, ScientificPackage.EXPLOITATION_ANALYSIS__BIOMASS_MODELS);
		}
		return biomassModels;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<SurfaceData> getSurfaceDatas() {
		if (surfaceDatas == null) {
			surfaceDatas = new EObjectContainmentEList<SurfaceData>(SurfaceData.class, this, ScientificPackage.EXPLOITATION_ANALYSIS__SURFACE_DATAS);
		}
		return surfaceDatas;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Schedule getSchedule() {
		if (schedule != null && schedule.eIsProxy()) {
			InternalEObject oldSchedule = (InternalEObject)schedule;
			schedule = (Schedule)eResolveProxy(oldSchedule);
			if (schedule != oldSchedule) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, ScientificPackage.EXPLOITATION_ANALYSIS__SCHEDULE, oldSchedule, schedule));
			}
		}
		return schedule;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Schedule basicGetSchedule() {
		return schedule;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setSchedule(Schedule newSchedule) {
		Schedule oldSchedule = schedule;
		schedule = newSchedule;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ScientificPackage.EXPLOITATION_ANALYSIS__SCHEDULE, oldSchedule, schedule));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case ScientificPackage.EXPLOITATION_ANALYSIS__BIOMASS_MODELS:
				return ((InternalEList<?>)getBiomassModels()).basicRemove(otherEnd, msgs);
			case ScientificPackage.EXPLOITATION_ANALYSIS__SURFACE_DATAS:
				return ((InternalEList<?>)getSurfaceDatas()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case ScientificPackage.EXPLOITATION_ANALYSIS__BIOMASS_MODELS:
				return getBiomassModels();
			case ScientificPackage.EXPLOITATION_ANALYSIS__SURFACE_DATAS:
				return getSurfaceDatas();
			case ScientificPackage.EXPLOITATION_ANALYSIS__SCHEDULE:
				if (resolve) return getSchedule();
				return basicGetSchedule();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case ScientificPackage.EXPLOITATION_ANALYSIS__BIOMASS_MODELS:
				getBiomassModels().clear();
				getBiomassModels().addAll((Collection<? extends BiomassModel>)newValue);
				return;
			case ScientificPackage.EXPLOITATION_ANALYSIS__SURFACE_DATAS:
				getSurfaceDatas().clear();
				getSurfaceDatas().addAll((Collection<? extends SurfaceData>)newValue);
				return;
			case ScientificPackage.EXPLOITATION_ANALYSIS__SCHEDULE:
				setSchedule((Schedule)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case ScientificPackage.EXPLOITATION_ANALYSIS__BIOMASS_MODELS:
				getBiomassModels().clear();
				return;
			case ScientificPackage.EXPLOITATION_ANALYSIS__SURFACE_DATAS:
				getSurfaceDatas().clear();
				return;
			case ScientificPackage.EXPLOITATION_ANALYSIS__SCHEDULE:
				setSchedule((Schedule)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case ScientificPackage.EXPLOITATION_ANALYSIS__BIOMASS_MODELS:
				return biomassModels != null && !biomassModels.isEmpty();
			case ScientificPackage.EXPLOITATION_ANALYSIS__SURFACE_DATAS:
				return surfaceDatas != null && !surfaceDatas.isEmpty();
			case ScientificPackage.EXPLOITATION_ANALYSIS__SCHEDULE:
				return schedule != null;
		}
		return super.eIsSet(featureID);
	}

} //ExploitationAnalysisImpl
